父VC弹出一个子View，其中子View需要接收父VC发出的通知:
[父VC]--------弹出-------->[View]
[View]--------监听-------->[父VC]
由于View的特殊性，我们不能直接将监听回调放在View本身，而是要另外写一个类似协调器的东东:
下面是子View的代码:
看上去貌似很好，不过现在我们需要另外写一个其他功能的View，该View同样需要监听父VC发出的通知。
如果不对Views的代码进行重新组织，我们很快就会在Repeat Self可耻的路上越走越远了…
所以我们必须做出改变！！！
现在我们把所需的监听功能统一放在一个单独的View中。
创建一个新的View: VolumeChangeListenerView
因为View的内容和对通知的处理需要由使用者决定，所以我们接下来在View定义中创建两个与之对应的闭包属性:
我们现在可以把协调器的定义以及其对应的属性放在VolumeChangeListenerView里了,

只不过协调器中对于监听的处理需要略作修改，代码如下：
现在到了最关键的body代码了，我们基本可以轻车熟路的这样写:
搞定！！！
现在我们有了新的VolumeChangeListenerView视图，我们可以将开头的SLAView重构如下：
我们同样可以非常轻松的基于VolumeChangeListenerView,创建一个新功能的监听视图了：
好啦！这样我们之后无论再写多少个带有监听功能的不同View，都可以直接借助于VolumeChangeListenerView类了。这样简化了代码，消除了重复，你是不是值得拥有呢? 😉
